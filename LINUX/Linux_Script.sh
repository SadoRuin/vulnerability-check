#!/bin/bash

# 문화체육관광 사이버안전센터 운영점검 가이드라인 전체 항목 Linux 보안 점검 스크립트

resultfile="Results_$(date '+%F_%H:%M:%S').txt"

PASS_COUNT=0
FAIL_COUNT=0
WARNING_COUNT=0
VULNERABLE_ITEMS=()
WARNING_ITEMS=()

# 1.01 root 계정 원격 접속 제한
check_1_01() {
  echo "1.01 root 계정 원격 접속 제한 검사" >>$resultfile 2>&1
  fcount=0

  # telnet 프로세스 실행 여부 확인
  if pgrep telnet >/dev/null; then

    # /etc/securetty 파일에서 pts/0~pts/x 설정 제거 또는 주석 처리 확인
    if grep -E "^pts/[0-9]+" /etc/securetty; then
      echo "취약: /etc/securetty 파일에 pts/0~pts/x 설정이 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi

    # /etc/pam.d/login 파일에서 auth required /lib/security/pam_securetty.so 설정 확인
    if ! grep -P -q "^auth\s+required\s+/lib/security/pam_securetty.so" /etc/pam.d/login; then
      echo "취약: /etc/pam.d/login 파일에 auth required /lib/security/pam_securetty.so 설정이 없습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  fi

  # 기존 root 계정 원격 접속 제한 검사
  if grep -q "^PermitRootLogin yes" /etc/ssh/sshd_config; then
    echo "취약: root 계정 원격 접속이 허용되어 있습니다." >>$resultfile 2>&1
    ((fcount++))
  fi

  if [ $fcount -eq 0 ]; then
    echo "양호: root 계정 원격 접속이 제한되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.01 root 계정 원격 접속 제한")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.02 패스워드 복잡성 설정
check_1_02() {
  echo "1.02 패스워드 복잡성 설정 검사" >>$resultfile 2>&1

  # /etc/pam.d/system-auth 파일에서 pam_pwquality.so 설정 확인
  if grep -q "pam_pwquality.so" /etc/pam.d/system-auth; then
    # 패스워드 길이 및 복잡성 설정 확인
    minlen=$(awk -F'=' '/minlen/ {print $2}' /etc/security/pwquality.conf | tr -d ' ')
    dcredit=$(awk -F'=' '/dcredit/ {print $2}' /etc/security/pwquality.conf | tr -d ' ')
    ucredit=$(awk -F'=' '/ucredit/ {print $2}' /etc/security/pwquality.conf | tr -d ' ')
    ocredit=$(awk -F'=' '/ocredit/ {print $2}' /etc/security/pwquality.conf | tr -d ' ')
    lcredit=$(awk -F'=' '/lcredit/ {print $2}' /etc/security/pwquality.conf | tr -d ' ')

    # 패스워드 복잡성 기준 검사
    if [[ "$minlen" -ge 10 && ("$dcredit" -le -1 || "$ucredit" -le -1 || "$ocredit" -le -1 || "$lcredit" -le -1) ]]; then
      echo "양호: 패스워드 복잡성이 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    elif [[ "$minlen" -ge 8 && ("$dcredit" -le -1 && "$ucredit" -le -1 && "$ocredit" -le -1 && "$lcredit" -le -1) ]]; then
      echo "양호: 패스워드 복잡성이 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: /etc/pam.d/system-auth에 패스워드 복잡성이 설정되어 있지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("1.02 패스워드 복잡성 설정")
    fi
  else
    echo "취약: /etc/pam.d/system-auth에 패스워드 복잡성이 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.02 패스워드 복잡성 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.03 계정 잠금 임계값 설정
check_1_03() {
  echo "1.03 계정 잠금 임계값 설정 검사" >>$resultfile 2>&1

  # /etc/pam.d/system-auth 파일에서 pam_tally2.so 설정 확인
  if grep -q "pam_tally2.so" /etc/pam.d/system-auth; then
    # 계정 잠금 임계값 확인
    deny_value=$(grep -oP "(?<=deny=)[0-9]+" /etc/pam.d/system-auth | head -n 1)

    if [ -n "$deny_value" ] && [ "$deny_value" -le 5 ]; then
      echo "양호: 계정 잠금 임계값이 5 이하로 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: /etc/pam.d/system-auth에 계정 잠금 임계값이 5 이하로 설정되어 있지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("1.03 계정 잠금 임계값 설정")
    fi
  else
    echo "취약: /etc/pam.d/system-auth에 계정 잠금 임계값이 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.03 계정 잠금 임계값 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.04 패스워드 파일 보호
check_1_04() {
  echo "1.04 패스워드 파일 보호 검사" >>$resultfile 2>&1

  # /etc/shadow 파일이 존재하는지 확인
  if [ -f /etc/shadow ]; then
    echo "양호: 쉐도우 패스워드를 사용하고 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    # /etc/passwd 파일에서 패스워드 필드가 암호화되어 있는지 확인
    if grep -q '^[^:]*:[!*]:' /etc/passwd; then
      echo "양호: 패스워드가 암호화되어 저장되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: 패스워드가 암호화되지 않고 저장되어 있습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("1.04 패스워드 파일 보호")
    fi
  fi

  echo "" >>$resultfile 2>&1
}

# 1.05 root 이외의 UID가 '0' 금지
check_1_05() {
  echo "1.05 root 이외의 UID가 '0' 금지 검사" >>$resultfile 2>&1
  if [ $(awk -F: '($3 == 0) {print $1}' /etc/passwd | wc -l) -eq 1 ]; then
    echo "양호: root 이외의 UID가 0인 계정이 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: root 이외의 UID가 0인 계정이 존재합니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.05 root 이외의 UID가 '0' 금지")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.06 root 계정 su 제한
check_1_06() {
  echo "1.06 root 계정 su 제한 검사" >>$resultfile 2>&1

  # /etc/pam.d/su 파일에서 pam_wheel.so 설정 확인
  if grep -P -q "auth\s+required\s+pam_wheel.so\s+use_uid" /etc/pam.d/su; then
    # 특정 그룹에 대한 제한 확인 (기본적으로 wheel 그룹)
    group=$(grep -oP "(?<=group=)[^ ]+" /etc/pam.d/su)
    if [ -z "$group" ]; then
      group="wheel"
    fi

    if getent group "$group" >/dev/null; then
      echo "양호: su 명령어를 $group 그룹에 속한 사용자만 사용하도록 제한되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: $group 그룹이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("1.06 root 계정 su 제한 - $group 그룹 없음")
    fi
  else
    echo "취약: su 명령어 사용 제한이 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.06 root 계정 su 제한")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.08 패스워드 최대 사용 기간 설정
check_1_08() {
  echo "1.08 패스워드 최대 사용 기간 설정 검사" >>$resultfile 2>&1
  max_days=$(grep "^PASS_MAX_DAYS" /etc/login.defs | awk '{print $2}')
  if [ -n "$max_days" ] && [ "$max_days" -le 90 ]; then
    echo "양호: 패스워드 최대 사용 기간이 90일 이하로 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /etc/login.defs에 패스워드 최대 사용 기간이 90일을 초과하거나 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.08 패스워드 최대 사용 기간 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.09 패스워드 최소 사용기간 설정
check_1_09() {
  echo "1.09 패스워드 최소 사용기간 설정 검사" >>$resultfile 2>&1
  min_days=$(grep "^PASS_MIN_DAYS" /etc/login.defs | awk '{print $2}')
  if [ -n "$min_days" ] && [ "$min_days" -ge 1 ]; then
    echo "양호: 패스워드 최소 사용 기간이 1일 이상으로 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /etc/login.defs에 패스워드 최소 사용 기간이 설정되어 있지 않거나 1일 미만입니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.09 패스워드 최소 사용기간 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.10 불필요한 계정 제거
check_1_10() {
  echo "1.10 불필요한 계정 제거 검사" >>$resultfile 2>&1
  unnecessary_accounts="lp sync shutdown halt news uucp operator games gopher"
  accounts=()
  for account in $unnecessary_accounts; do
    if id "$account" &>/dev/null; then
      accounts+=("$account")
    fi
  done
  if [ ${#accounts[@]} -eq 0 ]; then
    echo "양호: 불필요한 계정이 존재하지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 불필요한 계정이 존재합니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.10 불필요한 계정 제거")
    for account in "${accounts[@]}"; do
      echo "계정명: $account" >>$resultfile 2>&1
    done
  fi

  echo "" >>$resultfile 2>&1
}

# 1.11 관리자 그룹에 최소한의 계정 포함
check_1_11() {
  echo "1.11 관리자 그룹에 최소한의 계정 포함 검사" >>$resultfile 2>&1
  admin_group_members=$(grep "^wheel:" /etc/group | cut -d: -f4)
  if [ -z "$admin_group_members" ]; then
    echo "양호: 관리자 그룹에 추가 계정이 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "주의: 관리자 그룹에 다음 계정이 포함되어 있습니다: $admin_group_members" >>$resultfile 2>&1
    ((WARNING_COUNT++))
    WARNING_ITEMS+=("1.11 관리자 그룹에 최소한의 계정 포함")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.12 계정이 존재하지 않는 GID 금지
check_1_12() {
  echo "1.12 계정이 존재하지 않는 GID 금지 검사" >>$resultfile 2>&1
  orphan_gids=$(cut -d: -f3 /etc/group | sort | uniq -d)
  if [ -z "$orphan_gids" ]; then
    echo "양호: 계정이 존재하지 않는 GID가 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 다음 GID에 해당하는 계정이 존재하지 않습니다: $orphan_gids" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.12 계정이 존재하지 않는 GID 금지")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.13 동일한 UID 금지
check_1_13() {
  echo "1.13 동일한 UID 금지 검사" >>$resultfile 2>&1
  duplicate_uids=$(cut -d: -f3 /etc/passwd | sort | uniq -d)
  if [ -z "$duplicate_uids" ]; then
    echo "양호: 동일한 UID를 사용하는 계정이 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 다음 UID가 중복 사용되고 있습니다: $duplicate_uids" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.13 동일한 UID 금지")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.14 사용자 shell 점검
check_1_14() {
  echo "1.14 사용자 shell 점검" >>$resultfile 2>&1

  # 검사할 계정 목록
  accounts=("daemon" "bin" "sys" "adm" "listen" "nobody" "nobody4" "noaccess" "diag" "listen" "operator" "games" "gopher")

  invalid_shells=""
  for account in "${accounts[@]}"; do
    if grep -q "^$account:" /etc/passwd; then
      shell=$(grep "^$account:" /etc/passwd | cut -d: -f7)
      if [[ "$shell" != "/sbin/nologin" && "$shell" != "/bin/false" && "$shell" != "/usr/sbin/nologin" ]]; then
        invalid_shells+="$account:$shell"$'\n'
      fi
    fi
  done

  if [ -z "$invalid_shells" ]; then
    echo "양호: 로그인이 필요하지 않은 계정의 shell이 적절히 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 로그인이 필요하지 않은 계정의 shell 설정이 적절하지 않습니다:" >>$resultfile 2>&1
    echo "$invalid_shells" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.14 사용자 shell 점검")
  fi

  echo "" >>$resultfile 2>&1
}

# 1.15 Session Timeout 설정
check_1_15() {
  echo "1.15 Session Timeout 설정 검사" >>$resultfile 2>&1
  if grep -q "TMOUT=" /etc/profile; then
    timeout=$(grep "TMOUT=" /etc/profile | cut -d= -f2)
    if [ "$timeout" -le 600 ]; then
      echo "양호: Session Timeout이 10분 이하로 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: Session Timeout이 10분을 초과하여 설정되어 있습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("1.15 Session Timeout 설정")
    fi
  else
    echo "취약: Session Timeout이 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("1.15 Session Timeout 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.01 root 홈, 패스 디렉터리 권한 및 패스 설정
check_2_01() {
  echo "2.01 root 홈, 패스 디렉터리 권한 및 패스 설정 검사" >>$resultfile 2>&1
  if echo $PATH | grep -q "::"; then
    >>$resultfile 2>&1
    echo "취약: PATH 환경변수에 '::'가 포함되어 있습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.01 root 홈, 패스 디렉터리 권한 및 패스 설정")
  elif echo $PATH | grep -q ":$"; then
    >>$resultfile 2>&1
    echo "취약: PATH 환경변수가 ':'으로 끝납니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.01 root 홈, 패스 디렉터리 권한 및 패스 설정")
  elif echo $PATH | grep -q "^:"; then
    >>$resultfile 2>&1
    echo "취약: PATH 환경변수가 ':'으로 시작합니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.01 root 홈, 패스 디렉터리 권한 및 패스 설정")
  else
    echo "양호: PATH 환경변수가 적절히 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 2.02 파일 및 디렉터리 소유자 설정
check_2_02() {
  echo "2.02 파일 및 디렉터리 소유자 설정 검사" >>$resultfile 2>&1
  unowned_files=$(find / -xdev \( -nouser -or -nogroup \) 2>/dev/null)
  if [ -z "$unowned_files" ]; then
    echo "양호: 소유자나 그룹이 존재하지 않는 파일이 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 다음 파일들의 소유자나 그룹이 존재하지 않습니다:" >>$resultfile 2>&1
    echo "$unowned_files" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.02 파일 및 디렉터리 소유자 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.03 /etc/passwd 파일 소유자 및 권한 설정
check_2_03() {
  echo "2.03 /etc/passwd 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  passwd_perm=$(stat -c "%a %U" /etc/passwd)
  if [ "$passwd_perm" = "644 root" ]; then
    echo "양호: /etc/passwd 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /etc/passwd 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $passwd_perm 권장: 644" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.03 /etc/passwd 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.04 /etc/shadow 파일 소유자 및 권한 설정
check_2_04() {
  echo "2.04 /etc/shadow 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  shadow_perm=$(stat -c "%a %U" /etc/shadow)
  if [ "$shadow_perm" = "400 root" ] || [ "$shadow_perm" = "000 root" ]; then
    echo "양호: /etc/shadow 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /etc/shadow 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $shadow_perm 권장: 400" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.04 /etc/shadow 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.05 /etc/hosts 파일 소유자 및 권한 설정
check_2_05() {
  echo "2.05 /etc/hosts 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  hosts_perm=$(stat -c "%a %U" /etc/hosts)
  if [ "$hosts_perm" = "600 root" ]; then
    echo "양호: /etc/hosts 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /etc/hosts 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $hosts_perm 권장: 600" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.05 /etc/hosts 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.06 /etc/(x)inetd.conf 파일 및 /etc/xinetd.d/ 디렉토리 하위 파일 소유자 및 권한 설정
check_2_06() {
  echo "2.06 /etc/(x)inetd.conf 파일 및 /etc/xinetd.d/ 디렉토리 하위 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  fcount=0
  # /etc/inetd.conf 및 /etc/xinetd.conf 파일 검사
  for file in /etc/inetd.conf /etc/xinetd.conf; do
    if [ -f "$file" ]; then
      perm=$(stat -c "%a %U" "$file")
      if [ "$perm" = "600 root" ]; then
        continue
      else
        echo "취약: $file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 600" >>$resultfile 2>&1
        ((fcount++))
      fi
    fi
  done

  # /etc/xinetd.d/ 디렉토리 하위 파일 검사
  if [ -d "/etc/xinetd.d" ]; then
    if [ -z "$(ls -A /etc/xinetd.d)" ]; then
      echo "양호: /etc/xinetd.d 디렉토리가 존재하지만 파일이 없습니다." >>$resultfile 2>&1
    else
      for file in /etc/xinetd.d/*; do
        if [ -f "$file" ]; then
          perm=$(stat -c "%a %U" "$file")
          if [ "$perm" = "600 root" ]; then
            continue
          else
            echo "취약: $file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 600" >>$resultfile 2>&1
            ((fcount++))
          fi
        fi
      done
    fi
  fi

  if [ $fcount -eq 0 ]; then
    echo "양호: 모든 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.06 /etc/(x)inetd.conf 파일 및 /etc/xinetd.d/ 디렉토리 하위 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.07 /etc/syslog.conf 파일 소유자 및 권한 설정
check_2_07() {
  echo "2.07 /etc/syslog.conf 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  fcount=0

  for file in /etc/syslog.conf /etc/rsyslog.conf; do
    if [ -f "$file" ]; then
      perm=$(stat -c "%a %U" "$file")
      owner=$(echo "$perm" | awk '{print $2}')
      permissions=$(echo "$perm" | awk '{print $1}')

      if [ "$owner" = "root" ] && [ "$permissions" -le 644 ]; then
        continue
      else
        echo "취약: $file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 644" >>$resultfile 2>&1
        ((fcount++))
      fi
    fi
  done

  if [ $fcount -eq 0 ]; then
    echo "양호: 모든 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.07 /etc/syslog.conf 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.08 /etc/services 파일 소유자 및 권한 설정
check_2_08() {
  echo "2.08 /etc/services 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  services_file="/etc/services"
  perm=$(stat -c "%a %U" "$services_file")
  if [ "$perm" = "644 root" ]; then
    echo "양호: $services_file 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: $services_file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 644" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.08 /etc/services 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.09 SUID, SGID, Sticky bit 설정 파일 점검
check_2_09() {
  echo "2.09 SUID, SGID, Sticky bit 설정 파일 점검" >>$resultfile 2>&1

  # 검사할 파일 목록
  files=(
    "/sbin/dump"
    "/sbin/restore"
    "/sbin/unix_chkpwd"
    "/usr/bin/at"
    "/usr/bin/lpq"
    "/usr/bin/lpq-lpd"
    "/usr/bin/lpr"
    "/usr/bin/lpr-lpd"
    "/usr/bin/lprm"
    "/usr/bin/lprm-lpd"
    "/usr/bin/newgrp"
    "/usr/sbin/lpc"
    "/usr/sbin/lpc-lpd"
    "/usr/sbin/traceroute"
  )

  suid_files=""
  sgid_files=""
  sticky_files=""

  for file in "${files[@]}"; do
    if [ -e "$file" ]; then
      if [ -u "$file" ]; then
        suid_files+="$file"$'\n'
      fi
      if [ -g "$file" ]; then
        sgid_files+="$file"$'\n'
      fi
      if [ -k "$file" ]; then
        sticky_files+="$file"$'\n'
      fi
    fi
  done

  if [ -z "$suid_files" ] && [ -z "$sgid_files" ] && [ -z "$sticky_files" ]; then
    echo "양호: SUID, SGID, Sticky bit가 설정된 파일이 없습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 다음 파일들에 SUID, SGID 또는 Sticky bit가 설정되어 있습니다:" >>$resultfile 2>&1
    [ -n "$suid_files" ] && echo "SUID 파일들: $suid_files" >>$resultfile 2>&1
    [ -n "$sgid_files" ] && echo "SGID 파일들: $sgid_files" >>$resultfile 2>&1
    [ -n "$sticky_files" ] && echo "Sticky bit 파일들: $sticky_files" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.09 SUID, SGID, Sticky bit 설정 파일 점검")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.10 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정
check_2_10() {
  echo "2.10 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  # root 포함 모든 사용자의 홈 디렉토리 목록을 가져옵니다.
  user_dirs=$(awk -F':' '{ if ($3 >= 1000 || $3 == 0) print $6 }' /etc/passwd)
  # 검사할 파일 목록
  check_files=".profile .kshrc .cshrc .bashrc .bash_profile .login .exrc .netrc"
  vulnerable_files=() # 취약한 파일들을 저장할 배열

  for user_dir in $user_dirs; do
    for file in $check_files; do
      full_path="$user_dir/$file"
      if [ -f "$full_path" ]; then
        perm=$(stat -c "%a %U" "$full_path")
        if [ "$(stat -c "%U" "$full_path")" = "$(basename $user_dir)" ] && [ "$(stat -c "%a" "$full_path")" -le "644" ]; then
          continue
        else
          vulnerable_files+=("$full_path")
        fi
      fi
    done
  done

  if [ ${#vulnerable_files[@]} -eq 0 ]; then
    echo "양호: 모든 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
  else
    echo "취약: 특정 파일의 소유자 또는 권한이 올바르지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.10 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정")
    for vul_file in "${vulnerable_files[@]}"; do
      echo "파일경로: $vul_file" >>$resultfile 2>&1
    done
  fi

  echo "" >>$resultfile 2>&1
}

# 2.11 world writable 파일 점검
check_2_11() {
  echo "2.11 world writable 파일 점검" >>$resultfile 2>&1
  world_writable=$(find / -xdev -type f -perm -2 ! -path "/tmp/*" ! -path "/var/tmp/*" 2>/dev/null)
  if [ -z "$world_writable" ]; then
    echo "양호: world writable 파일이 발견되지 않았습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 다음 파일들이 world writable로 설정되어 있습니다:" >>$resultfile 2>&1
    echo "$world_writable" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.11 world writable 파일 점검")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.12 /dev에 존재하지 않는 device 파일 점검
check_2_12() {
  echo "2.12 /dev에 존재하지 않는 device 파일 점검" >>$resultfile 2>&1
  invalid_devices=$(find /dev -type f ! -path "/dev/shm/*" ! -path "/dev/pts/*" 2>/dev/null)
  if [ -z "$invalid_devices" ]; then
    echo "양호: /dev 디렉토리에 일반 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: /dev 디렉토리에 다음과 같은 일반 파일이 존재합니다:" >>$resultfile 2>&1
    echo "$invalid_devices" >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.12 /dev에 존재하지 않는 device 파일 점검")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.13 $HOME/.rhosts, hosts.equiv 사용 금지
check_2_13() {
  echo "2.13 $HOME/.rhosts, hosts.equiv 사용 금지 검사" >>$resultfile 2>&1
  fcount=0
  if [ -f "/etc/hosts.equiv" ]; then
    echo "취약: /etc/hosts.equiv 파일이 존재합니다." >>$resultfile 2>&1
    ((fcount++))
  else
    echo "양호: /etc/hosts.equiv 파일이 존재하지 않습니다." >>$resultfile 2>&1
  fi

  rhosts_files=$(find /home -name .rhosts 2>/dev/null)
  if [ -z "$rhosts_files" ]; then
    echo "양호: .rhosts 파일이 발견되지 않았습니다." >>$resultfile 2>&1
  else
    echo "취약: 다음 위치에 .rhosts 파일이 존재합니다:" >>$resultfile 2>&1
    echo "$rhosts_files" >>$resultfile 2>&1
  fi

  if [ $fcount -eq 0 ]; then
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.13 $HOME/.rhosts, hosts.equiv 사용 금지")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.14 접속 IP 및 포트 제한 검사
check_2_14() {
  echo "2.14 접속 IP 및 포트 제한 검사" >>$resultfile 2>&1
  fcount=0
  # TCP Wrapper 설정 파일 검사
  if [ -f "/etc/hosts.allow" ] && [ -f "/etc/hosts.deny" ]; then
    echo "양호: TCP Wrapper 설정 파일이 존재합니다." >>$resultfile 2>&1
    # "ALL:ALL"의 다양한 공백 패턴을 포함하는 정규 표현식 사용
    if grep -Eq "ALL\s*:\s*ALL" /etc/hosts.deny; then
      echo "양호: /etc/hosts.deny 파일에 ALL: ALL이 설정되어 있습니다." >>$resultfile 2>&1
      if grep -Eq "ALL\s*:\s*ALL" /etc/hosts.allow; then
        echo "취약: /etc/hosts.allow 파일에 ALL: ALL이 설정되어 있습니다." >>$resultfile 2>&1
        ((fcount++))
      else
        echo "양호: /etc/hosts.allow 파일에 ALL: ALL 설정이 없습니다." >>$resultfile 2>&1
      fi
    else
      echo "취약: /etc/hosts.deny 파일에 ALL: ALL 설정이 없습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  else
    echo "취약: TCP Wrapper 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((fcount++))
  fi

  # IPtables 설치되어 있는지 확인 및 수동 점검 메시지 표시
  if command -v iptables >/dev/null 2>&1; then
    echo "수동 점검: IPtables가 설치되어 있습니다. 설정을 수동으로 점검하십시오." >>$resultfile 2>&1
  else
    echo "IPtables가 설치되어 있지 않습니다. 검사를 넘깁니다." >>$resultfile 2>&1
  fi

  if [ $fcount -eq 0 ]; then
    echo "양호: 접속 IP 및 포트 제한이 적절히 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: 접속 IP 및 포트 제한이 적절히 설정되어 있지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.14 접속 IP 및 포트 제한")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.15 hosts.lpd 파일 소유자 및 권한 설정
check_2_15() {
  echo "2.15 hosts.lpd 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  lpd_file="/etc/hosts.lpd"
  if [ -f "$lpd_file" ]; then
    perm=$(stat -c "%a %U" "$lpd_file")
    if [ "$perm" = "600 root" ]; then
      echo "양호: $lpd_file 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: $lpd_file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 600" >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("2.15 hosts.lpd 파일 소유자 및 권한 설정")
    fi
  else
    echo "양호: $lpd_file 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 2.17 UMASK 설정 관리
check_2_17() {
  echo "2.17 UMASK 설정 관리 검사" >>$resultfile 2>&1
  umask_value=$(grep "^UMASK" /etc/login.defs | awk '{print $2}')
  if [ -n "$umask_value" ] && [ "$umask_value" -ge 022 ]; then
    echo "양호: UMASK 값이 022 이상으로 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: UMASK 값이 022 미만으로 설정되어 있거나 설정되지 않았습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.17 UMASK 설정 관리")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.18 홈 디렉터리 소유자 및 권한 설정
check_2_18() {
  echo "2.18 홈 디렉터리 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  fcount=0
  for user in $(cut -f1 -d: /etc/passwd); do
    shell=$(grep "^$user:" /etc/passwd | cut -f7 -d:)
    if [ "$shell" != "/sbin/nologin" ] && [ "$shell" != "/bin/false" ] && [ "$shell" != "/usr/sbin/nologin" ]; then
      home_dir=$(grep "^$user:" /etc/passwd | cut -f6 -d:)
      if [ -d "$home_dir" ]; then
        owner=$(stat -c "%U" "$home_dir")
        perm=$(stat -c "%a" "$home_dir")
        if [ "$owner" = "$user" ] && [ "$perm" -le "755" ]; then
          echo "양호: $user의 홈 디렉터리($home_dir) 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
        else
          echo "취약: $user의 홈 디렉터리($home_dir) 소유자 또는 권한이 올바르지 않습니다. 현재 설정: 소유자=$owner, 권한=$perm 권장: 755" >>$resultfile 2>&1
          ((fcount++))
        fi
      fi
    fi
  done
  if [ $fcount -eq 0 ]; then
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.18 홈 디렉터리 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.19 홈 디렉터리로 지정한 디렉터리의 존재 관리
check_2_19() {
  echo "2.19 홈 디렉터리로 지정한 디렉터리의 존재 관리 검사" >>$resultfile 2>&1
  fcount=0
  while IFS=: read -r user _ _ _ _ home_dir shell; do
    if [ "$shell" != "/sbin/nologin" ] && [ "$shell" != "/bin/false" ] && [ "$shell" != "/usr/sbin/nologin" ]; then
      if [ ! -d "$home_dir" ]; then
        echo "취약: $user의 홈 디렉터리($home_dir)가 존재하지 않습니다." >>$resultfile 2>&1
        ((fcount++))
      fi
    fi
  done </etc/passwd
  if [ $fcount -eq 0 ]; then
    echo "양호: 모든 사용자의 홈 디렉터리가 존재합니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("2.19 홈 디렉터리로 지정한 디렉터리의 존재 관리")
  fi

  echo "" >>$resultfile 2>&1
}

# 2.20 숨겨진 파일 및 디렉터리 검색 및 제거
check_2_20() {
  echo "2.20 숨겨진 파일 및 디렉터리 검색 및 제거 검사" >>$resultfile 2>&1
  hidden_files=$(find / -xdev -name '.*' -type f 2>/dev/null)
  hidden_dirs=$(find / -xdev -name '.*' -type d 2>/dev/null)
  if [ -z "$hidden_files" ] && [ -z "$hidden_dirs" ]; then
    echo "양호: 숨겨진 파일이나 디렉터리가 발견되지 않았습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "주의: 숨겨진 파일 또는 디렉터리가 발견되었습니다." >>$resultfile 2>&1
    echo "수동 점검: 숨겨진 파일 또는 디렉터리를 확인하고 필요한 경우 삭제하십시오." >>$resultfile 2>&1
    ((WARNING_COUNT++))
    # [ -n "$hidden_files" ] && echo "숨겨진 파일들: $hidden_files" >>$resultfile 2>&1
    # [ -n "$hidden_dirs" ] && echo "숨겨진 디렉터리들: $hidden_dirs" >>$resultfile 2>&1
  fi

  echo "" >>$resultfile 2>&1
}

# 3.01 finger 서비스 비활성화
check_3_01() {
  echo "3.01 finger 서비스 비활성화 검사" >>$resultfile 2>&1
  if systemctl is-active --quiet fingerd; then
    echo "취약: finger 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
  else
    echo "양호: finger 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.02 Anonymous FTP 비활성화
check_3_02() {
  echo "3.02 Anonymous FTP 비활성화 검사" >>$resultfile 2>&1
  if grep -q "^ftp:" /etc/passwd; then
    echo "취약: Anonymous FTP 계정이 활성화되어 있습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
  else
    echo "양호: Anonymous FTP 계정이 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.03 r 계열 서비스 비활성화
check_3_03() {
  echo "3.03 r 계열 서비스 비활성화 검사" >>$resultfile 2>&1
  fcount=0
  r_services="rsh rlogin rexec"
  for service in $r_services; do
    if systemctl is-active --quiet $service; then
      echo "취약: $service 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  done
  if [ $fcount -eq 0 ]; then
    echo "양호: $service 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.03 r 계열 서비스 비활성화")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.04 cron 파일 소유자 및 권한설정
check_3_04() {
  echo "3.04 cron 파일 소유자 및 권한설정 검사" >>$resultfile 2>&1
  fcount=0
  cron_files="/etc/crontab /etc/cron.hourly /etc/cron.daily /etc/cron.weekly /etc/cron.monthly /etc/cron.allow /etc/cron.deny"
  for file in $cron_files; do
    if [ -e "$file" ]; then
      perm=$(stat -c "%a %U" "$file")
      if [ "$(stat -c "%U" "$file")" = "root" ] && [ "$(stat -c "%a" "$file")" -le "640" ]; then
        continue
      else
        echo "취약: $file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 640" >>$resultfile 2>&1
        ((fcount++))
      fi
    fi
  done
  if [ $fcount -eq 0 ]; then
    echo "양호: 모든 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.04 cron 파일 소유자 및 권한설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.05 Dos 공격에 취약한 서비스 비활성화
check_3_05() {
  echo "3.05 Dos 공격에 취약한 서비스 비활성화 검사" >>$resultfile 2>&1
  fcount=0
  vulnerable_services="echo chargen daytime discard" >>$resultfile 2>&1
  for service in $vulnerable_services; do
    # systemctl을 사용한 서비스 상태 검사
    if systemctl is-active --quiet $service; then
      echo "취약: $service 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi

    # /etc/inetd.conf 파일에서 서비스 검사
    if [ -f "/etc/inetd.conf" ]; then
      if grep -q "^$service" "/etc/inetd.conf"; then
        echo "취약: /etc/inetd.conf 내 $service 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
        ((fcount++))
      fi
    fi

    # /etc/xinetd.d/ 내의 설정 파일 검사
    if [ -d "/etc/xinetd.d" ]; then
      if [ -z "$(ls -A /etc/xinetd.d)" ]; then
        echo "양호: /etc/xinetd.d 디렉토리가 존재하지만 파일이 없습니다." >>$resultfile 2>&1
      else
        for file in /etc/xinetd.d/*; do
          if grep -q "^service $service" "$file" && grep -q "disable\s*=\s*no" "$file"; then
            echo "취약: /etc/xinetd.d/ 내 $service 서비스가 활성화된 설정 파일이 있습니다." >>$resultfile 2>&1
            ((fcount++))
            break
          fi
        done
      fi
    fi
  done
  if [ $fcount -eq 0 ]; then
    echo "양호: Dos 공격에 취약한 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.05 Dos 공격에 취약한 서비스 비활성화")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.06 NFS 서비스 비활성화
NFS_COUNT=0
check_3_06() {
  echo "3.06 NFS 서비스 비활성화 검사" >>$resultfile 2>&1
  fcount=0
  # NFS 관련 데몬들의 목록 업데이트
  nfs_daemons="nfs mountd statd lockd rpc.idmapd"

  # NFS 관련 데몬들이 실행 중인지 확인
  for daemon in $nfs_daemons; do
    if ps ax | grep -v grep | grep -qw $daemon; then
      echo "취약: NFS 서비스 관련 데몬($daemon)이 실행 중입니다." >>$resultfile 2>&1
      ((NFS_COUNT++))
      ((fcount++))
    fi
  done

  if [ $fcount -eq 0 ]; then
    echo "양호: NFS 서비스 관련 데몬이 실행 중이지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.06 NFS 서비스 비활성화")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.07 NFS 접근 통제
check_3_07() {
  echo "3.07 NFS 접근 통제 검사" >>$resultfile 2>&1
  if [ $NFS_COUNT -eq 0 ]; then
    echo "양호: NFS 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
    echo "" >>$resultfile 2>&1
    return
  fi

  if [ -f "/etc/exports" ]; then
    if grep -qE "^/.*\*" /etc/exports; then
      echo "취약: NFS 공유에 전체 공개된 디렉터리가 있습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.07 NFS 접근 통제")
    else
      echo "양호: NFS 공유가 적절히 제한되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    fi
  else
    echo "취약: NFS 설정 파일(/etc/exports)이 존재하지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.07 NFS 접근 통제")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.08 automountd 제거
check_3_08() {
  echo "3.08 automountd 제거 검사" >>$resultfile 2>&1
  # autofs와 automount 프로세스 확인
  if ps ax | grep -iE 'autofs|automount' | grep -v grep >/dev/null; then
    echo "취약: automountd 또는 autofs 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.08 automountd 제거")
  else
    echo "양호: automountd 및 autofs 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.09 RPC 서비스 확인
check_3_09() {
  echo "3.09 RPC 서비스 확인" >>$resultfile 2>&1
  fcount=0
  rpc_services="rpc.cmsd rpc.ttdbserverd sadmind rusersd walld sprayd rstatd rpc.nisd rexd rpc.pcnfsd rpc.statd rpc.ypupdated rpc.rquotad kcms_server cachefsd"
  for service in $rpc_services; do
    # /etc/inetd.conf 파일에서 서비스 확인
    if [ -f /etc/inetd.conf ] && grep -q "^$service" /etc/inetd.conf; then
      echo "취약: /etc/inetd.conf에서 $service RPC 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi

    # /etc/xinetd.d 디렉토리 내 파일에서 서비스 확인
    if [ -d /etc/xinetd.d ] && [ "$(ls -A /etc/xinetd.d)" ] && grep -q "^service $service" /etc/xinetd.d/*; then
      echo "취약: /etc/xinetd.d에서 $service RPC 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  done

  if [ $fcount -eq 0 ]; then
    echo "양호: 불필요한 RPC 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.09 RPC 서비스 확인")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.10 NIS, NIS+ 점검
check_3_10() {
  echo "3.10 NIS, NIS+ 점검" >>$resultfile 2>&1
  fcount=0
  nis_services="ypserv ypbind ypxfrd rpc.yppasswdd rpc.ypupdated"
  for service in $nis_services; do
    if systemctl is-active --quiet $service; then
      echo "취약: $service NIS 관련 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  done

  if [ $fcount -eq 0 ]; then
    echo "양호: NIS 관련 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.10 NIS, NIS+ 점검")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.11 tftp, talk 서비스 비활성화
check_3_11() {
  echo "3.11 tftp, talk 서비스 비활성화 검사" >>$resultfile 2>&1
  fcount=0
  services="tftp talk ntalk"
  for service in $services; do
    # systemctl을 사용한 서비스 상태 검사
    if systemctl is-active --quiet $service; then
      echo "취약: $service 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi

    # /etc/inetd.conf 파일에서 서비스 검사
    if [ -f /etc/inetd.conf ] && grep -q "^$service" /etc/inetd.conf; then
      echo "취약: /etc/inetd.conf에서 $service 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
      ((fcount++))
    fi

    # /etc/xinetd.d 디렉토리 내 파일에서 서비스 검사
    if [ -d /etc/xinetd.d ]; then
      if [ -z "$(ls -A /etc/xinetd.d)" ]; then
        echo "양호: /etc/xinetd.d 디렉토리가 존재하지만 파일이 없습니다." >>$resultfile 2>&1
      else
        for file in /etc/xinetd.d/*; do
          if grep -q "^service $service" "$file" && grep -q "disable\s*=\s*no" "$file"; then
            echo "취약: /etc/xinetd.d에서 $service 서비스가 활성화된 설정 파일이 있습니다." >>$resultfile 2>&1
            ((fcount++))
            break
          fi
        done
      fi
    fi
  done
  if [ $fcount -eq 0 ]; then
    echo "양호: tftp, talk 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.11 tftp, talk 서비스 비활성화")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.12 Sendmail 버전 점검
SMTP_COUNT=0
check_3_12() {
  echo "3.12 Sendmail 버전 점검" >>$resultfile 2>&1
  if command -v sendmail >/dev/null 2>&1; then
    if pgrep sendmail >/dev/null 2>&1; then
      SMTP_COUNT=1 # Sendmail 프로세스가 실행 중이면 SMTP_COUNT를 1로 설정
      version=$(sendmail -d0.1 </dev/null | grep -i "Version" | awk '{print $2}')
      echo "정보: Sendmail 버전: $version" >>$resultfile 2>&1
      echo "주의: Sendmail 버전의 최신 여부를 수동으로 확인하세요." >>$resultfile 2>&1
      ((WARNING_COUNT++))
      WARNING_ITEMS+=("3.12 Sendmail 버전 점검")
    else
      echo "양호: Sendmail이 설치되어 있지만, 현재 실행 중이지 않습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    fi
  else
    echo "양호: Sendmail이 설치되어 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.13 스팸 메일 릴레이 제한
check_3_13() {
  echo "3.13 스팸 메일 릴레이 제한 검사" >>$resultfile 2>&1
  if [ $SMTP_COUNT -eq 1 ]; then # SMTP_COUNT 변수를 사용하여 Sendmail 프로세스 실행 여부 판단
    if [ -f "/etc/mail/sendmail.cf" ]; then
      if grep -q "R$\*" /etc/mail/sendmail.cf | grep "Relaying denied"; then
        echo "양호: 스팸 메일 릴레이가 제한되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      else
        echo "취약: 스팸 메일 릴레이 제한 설정이 되어 있지 않습니다." >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.13 스팸 메일 릴레이 제한")
      fi
    else
      echo "취약: Sendmail 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.13 스팸 메일 릴레이 제한")
    fi
  else
    echo "양호: Sendmail 프로세스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.14 일반 사용자의 Sendmail 실행 방지 검사
check_3_14() {
  echo "3.14 일반 사용자의 Sendmail 실행 방지 검사" >>$resultfile 2>&1
  if [ $SMTP_COUNT -eq 1 ]; then # SMTP_COUNT 변수를 사용하여 Sendmail 프로세스 실행 여부 판단
    if [ -f "/etc/mail/sendmail.cf" ]; then
      if grep -q "restrictqrun" /etc/mail/sendmail.cf; then
        echo "양호: 일반 사용자의 Sendmail 실행이 제한되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      else
        echo "취약: 일반 사용자의 Sendmail 실행 제한 설정이 되어 있지 않습니다." >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.14 일반 사용자의 Sendmail 실행 방지")
      fi
    else
      echo "취약: Sendmail 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.14 일반 사용자의 Sendmail 실행 방지")
    fi
  else
    echo "양호: Sendmail 프로세스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.15 DNS 보안 버전 패치
DNS_COUNT=0 # DNS 서비스 실행 여부를 저장할 변수 초기화
check_3_15() {
  echo "3.15 DNS 보안 버전 패치 검사" >>$resultfile 2>&1
  if command -v named >/dev/null 2>&1; then # BIND(named) 설치 여부 확인
    if pgrep named >/dev/null 2>&1; then    # BIND(named) 실행 여부 확인
      DNS_COUNT=1                           # BIND가 실행 중이면 DNS_COUNT를 1로 설정
      version=$(named -v | awk '{print $2}')
      echo "정보: BIND 버전: $version" >>$resultfile 2>&1
      echo "주의: BIND 버전의 최신 여부를 수동으로 확인하세요." >>$resultfile 2>&1
      ((WARNING_COUNT++))
      WARNING_ITEMS+=("3.15 DNS 보안 버전 패치")
    else
      echo "양호: BIND가 설치되어 있지만, 현재 실행 중이지 않습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    fi
  else
    echo "양호: DNS 서버(BIND)가 설치되어 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.16 DNS Zone Transfer 설정
check_3_16() {
  echo "3.16 DNS Zone Transfer 설정 검사" >>$resultfile 2>&1
  if [ $DNS_COUNT -eq 1 ]; then # DNS 서비스 실행 여부 판단
    if [ -f "/etc/named.conf" ]; then
      if grep -q "allow-transfer" /etc/named.conf; then
        echo "양호: DNS Zone Transfer 설정이 제한되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      else
        echo "취약: DNS Zone Transfer 설정이 제한되어 있지 않습니다." >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.16 DNS Zone Transfer 설정")
      fi
    else
      echo "취약: DNS 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.16 DNS Zone Transfer 설정")
    fi
  else
    echo "양호: DNS 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.24 SSH 원격접속 허용
check_3_24() {
  echo "3.24 SSH 원격접속 허용 검사" >>$resultfile 2>&1
  if systemctl is-active --quiet sshd; then
    echo "양호: SSH 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    echo "취약: SSH 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.24 SSH 원격접속 허용")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.25 ftp 서비스 확인
FTP_COUNT=0 # FTP 관련 서비스 실행 카운트 변수 초기화
check_3_25() {
  echo "3.25 ftp 서비스 확인" >>$resultfile 2>&1

  # ftp, vsftpd, proftp 프로세스 실행 여부 확인 (sftp 제외)
  ftp_processes=$(ps -ef | grep -E "ftp|vsftpd|proftp" | grep -v -E "grep|sftp-server")

  if [ -n "$ftp_processes" ]; then
    echo "취약: FTP 서비스가 활성화되어 있습니다. 실행 중인 프로세스:" >>$resultfile 2>&1
    echo "$ftp_processes" >>$resultfile 2>&1
    FTP_COUNT=1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.25 ftp 서비스 확인")
  else
    echo "양호: FTP 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.26 ftp 계정 shell 제한
check_3_26() {
  echo "3.26 ftp 계정 shell 제한 검사" >>$resultfile 2>&1
  ftp_entry=$(grep "^ftp:" /etc/passwd)

  if [ -z "$ftp_entry" ]; then
    echo "양호: ftp 계정이 존재하지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ftp_shell=$(echo "$ftp_entry" | cut -d: -f7)
    if [ "$ftp_shell" = "/sbin/nologin" ] || [ "$ftp_shell" = "/bin/false" ] || [ "$ftp_shell" = "/usr/sbin/nologin" ]; then
      echo "양호: ftp 계정의 로그인 쉘이 제한되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: ftp 계정의 로그인 쉘이 제한되어 있지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.26 ftp 계정 shell 제한")
    fi
  fi

  echo "" >>$resultfile 2>&1
}

# 3.27 ftpusers 파일 소유자 및 권한 설정
check_3_27() {
  echo "3.27 ftpusers 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  if [ $FTP_COUNT -gt 0 ]; then
    ftpusers_file="/etc/ftpusers"
    if [ -f "$ftpusers_file" ]; then
      perm=$(stat -c "%a %U" "$ftpusers_file")
      if [ "$(stat -c "%U" "$ftpusers_file")" = "root" ] && [ "$(stat -c "%a" "$ftpusers_file")" -le "640" ]; then
        echo "양호: $ftpusers_file 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      else
        echo "취약: $ftpusers_file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 640" >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.27 ftpusers 파일 소유자 및 권한 설정")
      fi
    else
      echo "취약: $ftpusers_file 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.27 ftpusers 파일 소유자 및 권한 설정")
    fi
  else
    echo "양호: FTP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.28 ftpusers 파일 설정
check_3_28() {
  echo "3.28 ftpusers 파일 설정 검사" >>$resultfile 2>&1
  if [ $FTP_COUNT -gt 0 ]; then
    ftpusers_file="/etc/ftpusers"
    if [ -f "$ftpusers_file" ]; then
      if grep -q "root" "$ftpusers_file"; then
        echo "양호: root 계정이 ftpusers 파일에 등록되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      else
        echo "취약: root 계정이 ftpusers 파일에 등록되어 있지 않습니다." >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.28 ftpusers 파일 설정")
      fi
    else
      echo "취약: ftpusers 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.28 ftpusers 파일 설정")
    fi
  else
    echo "양호: FTP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.29 at 파일 소유자 및 권한 설정
check_3_29() {
  echo "3.29 at 파일 소유자 및 권한 설정 검사" >>$resultfile 2>&1
  fcount=0
  at_files="/etc/at.allow /etc/at.deny"
  for file in $at_files; do
    if [ -f "$file" ]; then
      perm=$(stat -c "%a %U" "$file")
      if [ "$(stat -c "%U" "$file")" = "root" ] && [ "$(stat -c "%a" "$file")" -le "640" ]; then
        continue
      else
        echo "취약: $file 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 640" >>$resultfile 2>&1
        ((fcount++))
      fi
    else
      echo "정보: $file 파일이 존재하지 않습니다." >>$resultfile 2>&1
    fi
  done
  if [ $fcount -eq 0 ]; then
    echo "양호: at 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.29 at 파일 소유자 및 권한 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.30 SNMP 서비스 구동 점검
SNMP_COUNT=0
check_3_30() {
  echo "3.30 SNMP 서비스 구동 점검" >>$resultfile 2>&1
  if ps -ef | grep -E "snmp" | grep -v grep >/dev/null; then
    echo "취약: SNMP 서비스가 활성화되어 있습니다." >>$resultfile 2>&1
    SNMP_COUNT=1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.30 SNMP 서비스 구동 점검")
  else
    echo "양호: SNMP 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.31 SNMP 서비스 커뮤니티스트링의 복잡성 설정
check_3_31() {
  echo "3.31 SNMP 서비스 커뮤니티스트링의 복잡성 설정 검사" >>$resultfile 2>&1
  if [ $SNMP_COUNT -gt 0 ]; then # SNMP 프로세스 실행 여부 확인
    if [ -f "/etc/snmp/snmpd.conf" ]; then
      if grep -E "public|private" /etc/snmp/snmpd.conf; then
        echo "취약: SNMP 커뮤니티스트링이 기본값(public 또는 private)으로 설정되어 있습니다." >>$resultfile 2>&1
        ((FAIL_COUNT++))
        VULNERABLE_ITEMS+=("3.31 SNMP 서비스 커뮤니티스트링의 복잡성 설정")
      else
        echo "양호: SNMP 커뮤니티스트링이 기본값과 다르게 설정되어 있습니다." >>$resultfile 2>&1
        ((PASS_COUNT++))
      fi
    else
      echo "취약: SNMP 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.31 SNMP 서비스 커뮤니티스트링의 복잡성 설정")
    fi
  else
    echo "양호: SNMP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
  fi

  echo "" >>$resultfile 2>&1
}

# 3.32 로그온 시 경고 메시지 제공
check_3_32() {
  echo "3.32 로그온 시 경고 메시지 제공 검사" >>$resultfile 2>&1
  fcount=0

  # 서버 로그온 메시지 설정 검사
  if [ -f "/etc/motd" ]; then
    if [ -s "/etc/motd" ]; then
      echo "양호: 서버 로그온 메시지가 설정되어 있습니다." >>$resultfile 2>&1
    else
      echo "취약: 서버 로그온 메시지가 설정되어 있지 않습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  else
    echo "취약: 서버 로그온 메시지 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((fcount++))
  fi

  # FTP 서비스의 로그온 메시지 설정 검사
  if [ $FTP_COUNT -gt 0 ]; then
    if [ -f "/etc/vsftpd/vsftpd.conf" ]; then
      if grep -q "^ftpd_banner=" /etc/vsftpd/vsftpd.conf; then
        echo "양호: FTP 로그온 메시지가 설정되어 있습니다." >>$resultfile 2>&1
      else
        echo "취약: FTP 로그온 메시지가 설정되어 있지 않습니다." >>$resultfile 2>&1
        ((fcount++))
      fi
    else
      echo "취약: vsftpd 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  else
    echo "양호: FTP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
  fi

  # SMTP 서비스의 로그온 메시지 설정 검사
  if [ $SMTP_COUNT -gt 0 ]; then
    if [ -f "/etc/mail/sendmail.cf" ]; then
      if grep -q "^O SmtpGreetingMessage=" /etc/mail/sendmail.cf; then
        echo "양호: SMTP 로그온 메시지가 설정되어 있습니다." >>$resultfile 2>&1
      else
        echo "취약: SMTP 로그온 메시지가 설정되어 있지 않습니다." >>$resultfile 2>&1
        ((fcount++))
      fi
    else
      echo "취약: Sendmail 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  else
    echo "양호: SMTP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
  fi

  # Telnet 서비스의 로그온 메시지 설정 검사
  if systemctl is-active --quiet telnetd; then
    if [ -f "/etc/issue.net" ]; then
      if [ -s "/etc/issue.net" ]; then
        echo "양호: Telnet 로그온 메시지가 /etc/issue.net 파일에 설정되어 있습니다." >>$resultfile 2>&1
      else
        echo "취약: Telnet 로그온 메시지가 설정되어 있지 않습니다." >>$resultfile 2>&1
        ((fcount++))
      fi
    else
      echo "취약: /etc/issue.net 파일이 존재하지 않습니다." >>$resultfile 2>&1
      ((fcount++))
    fi
  else
    echo "양호: Telnet 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
  fi

  if [ $fcount -eq 0 ]; then
    ((PASS_COUNT++))
  else
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.32 로그온 시 경고 메시지 제공")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.33 NFS 설정 파일 접근권한
check_3_33() {
  echo "3.33 NFS 설정 파일 접근권한 검사" >>$resultfile 2>&1
  if [ $NFS_COUNT -eq 0 ]; then
    echo "양호: NFS 서비스가 비활성화되어 있습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
    echo "" >>$resultfile 2>&1
    return
  fi

  nfs_conf="/etc/exports"
  if [ -f "$nfs_conf" ]; then
    perm=$(stat -c "%a %U" "$nfs_conf")
    if [ "$(stat -c "%U" "$nfs_conf")" = "root" ] && [ "$(stat -c "%a" "$nfs_conf")" -le "644" ]; then
      echo "양호: $nfs_conf 파일의 소유자와 권한이 올바르게 설정되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: $nfs_conf 파일의 소유자 또는 권한이 올바르지 않습니다. 현재 설정: $perm 권장: 644" >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.33 NFS 설정 파일 접근권한")
    fi
  else
    echo "취약: $nfs_conf 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.33 NFS 설정 파일 접근권한")
  fi

  echo "" >>$resultfile 2>&1
}

# 3.34 expn, vrfy 명령어 제한
check_3_34() {
  echo "3.34 expn, vrfy 명령어 제한 검사" >>$resultfile 2>&1
  if [ $SMTP_COUNT -eq 0 ]; then
    echo "양호: SMTP 서비스가 실행되고 있지 않습니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
    echo "" >>$resultfile 2>&1
    return
  fi

  if [ -f "/etc/mail/sendmail.cf" ]; then
    if grep -q "O PrivacyOptions=.*noexpn" /etc/mail/sendmail.cf && grep -q "O PrivacyOptions=.*novrfy" /etc/mail/sendmail.cf; then
      echo "양호: expn 및 vrfy 명령어가 제한되어 있습니다." >>$resultfile 2>&1
      ((PASS_COUNT++))
    else
      echo "취약: expn 또는 vrfy 명령어 제한이 설정되어 있지 않습니다." >>$resultfile 2>&1
      ((FAIL_COUNT++))
      VULNERABLE_ITEMS+=("3.34 expn, vrfy 명령어 제한")
    fi
  else
    echo "취약: Sendmail 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("3.34 expn, vrfy 명령어 제한")
  fi

  echo "" >>$resultfile 2>&1
}

# 4.01 최신 보안패치 및 벤더 권고사항 적용
check_4_01() {
  echo "4.01 최신 보안패치 및 벤더 권고사항 적용 검사" >>$resultfile 2>&1
  echo "주의: 이 항목은 수동으로 확인해야 합니다. 시스템 관리자에게 최신 보안 패치 적용 상태를 문의하세요." >>$resultfile 2>&1
  ((WARNING_COUNT++))
  WARNING_ITEMS+=("4.01 최신 보안패치 및 벤더 권고사항 적용")

  echo "" >>$resultfile 2>&1
}

# 5.01 로그의 정기적 검토 및 보고
check_5_01() {
  echo "5.01 로그의 정기적 검토 및 보고 검사" >>$resultfile 2>&1
  echo "주의: 이 항목은 수동으로 확인해야 합니다. 로그 검토 및 보고 정책과 절차를 확인하세요." >>$resultfile 2>&1
  ((WARNING_COUNT++))
  WARNING_ITEMS+=("5.01 로그의 정기적 검토 및 보고")

  echo "" >>$resultfile 2>&1
}

# 5.02 정책에 따른 시스템 로깅 설정
check_5_02() {
  echo "5.02 정책에 따른 시스템 로깅 설정 검사" >>$resultfile 2>&1
  if [ -f "/etc/syslog.conf" ] || [ -f "/etc/rsyslog.conf" ]; then
    echo "양호: 시스템 로깅 설정 파일이 존재합니다." >>$resultfile 2>&1
    ((PASS_COUNT++))
    echo "주의: 로그 설정의 적절성은 수동으로 검토해야 합니다." >>$resultfile 2>&1
    ((WARNING_COUNT++))
    WARNING_ITEMS+=("5.02 정책에 따른 시스템 로깅 설정")
  else
    echo "취약: 시스템 로깅 설정 파일이 존재하지 않습니다." >>$resultfile 2>&1
    ((FAIL_COUNT++))
    VULNERABLE_ITEMS+=("5.02 정책에 따른 시스템 로깅 설정")
  fi

  echo "" >>$resultfile 2>&1
}

# 메인 함수
main() {
  echo "Linux 보안 점검을 시작합니다..." >>$resultfile 2>&1
  echo "--------------------------------------------------" >>$resultfile 2>&1
  echo "" >>$resultfile 2>&1

  check_1_01
  check_1_02
  check_1_03
  check_1_04
  check_1_05
  check_1_06
  check_1_08
  check_1_09
  check_1_10
  check_1_11
  check_1_12
  check_1_13
  check_1_14
  check_1_15
  check_2_01
  check_2_02
  check_2_03
  check_2_04
  check_2_05
  check_2_06
  check_2_07
  check_2_08
  check_2_09
  check_2_10
  check_2_11
  check_2_12
  check_2_13
  check_2_14
  check_2_15
  check_2_17
  check_2_18
  check_2_19
  check_2_20
  check_3_01
  check_3_02
  check_3_03
  check_3_04
  check_3_05
  check_3_06
  check_3_07
  check_3_08
  check_3_09
  check_3_10
  check_3_11
  check_3_12
  check_3_13
  check_3_14
  check_3_15
  check_3_16
  check_3_24
  check_3_25
  check_3_26
  check_3_27
  check_3_28
  check_3_29
  check_3_30
  check_3_31
  check_3_32
  check_3_33
  check_3_34
  check_4_01
  check_5_01
  check_5_02

  echo "" >>$resultfile 2>&1
  echo "--------------------------------------------------" >>$resultfile 2>&1
  echo "Linux 보안 점검이 완료되었습니다." >>$resultfile 2>&1
  echo "" >>$resultfile 2>&1

  echo "검사 결과 요약:" >>$resultfile 2>&1
  echo "총 항목 수: 63" >>$resultfile 2>&1
  echo "양호 항목 수: $PASS_COUNT" >>$resultfile 2>&1
  echo "취약 항목 수: $FAIL_COUNT" >>$resultfile 2>&1
  echo "주의 항목 수: $WARNING_COUNT" >>$resultfile 2>&1
  echo "" >>$resultfile 2>&1
  echo "취약한 항목 목록:" >>$resultfile 2>&1
  for item in "${VULNERABLE_ITEMS[@]}"; do
    echo "- $item" >>$resultfile 2>&1
  done
  echo "" >>$resultfile 2>&1
  echo "주의할 항목 목록:" >>$resultfile 2>&1
  for item in "${WARNING_ITEMS[@]}"; do
    echo "- $item" >>$resultfile 2>&1
  done
}

# 스크립트 실행
main
